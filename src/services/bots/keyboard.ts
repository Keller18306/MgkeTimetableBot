import { Updater } from '../../updater';
import { SCHEDULE_FORMATTERS, WeekIndex } from '../../utils';
import { AbstractChat, AbstractContext, ButtonType, KeyboardBuilder, KeyboardColor } from './abstract';

function noYesSmile(value: number | boolean, text: string, smiles: [string, string] = ['‚úÖ', 'üö´']): string {
    return (value ? smiles[0] : smiles[1]) + ` ${text}`
}

function noYesColor(value: number | boolean) {
    return value ? KeyboardColor.POSITIVE_COLOR : KeyboardColor.NEGATIVE_COLOR
}

export class Keyboard {
    private context?: AbstractContext;
    private chat: AbstractChat;

    constructor(context: AbstractContext | undefined, chat: AbstractChat) {
        this.context = context;
        this.chat = chat;
    }

    public get MainMenu(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('MainMenu');

        ///___ 1 LEVEL ___///
        if (this.chat.mode === null) {
            if (!this.context?.isChat) keyboard.add({
                text: 'üìö –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
                color: KeyboardColor.PRIMARY_COLOR
            }).row()
        } else if (this.chat.mode === 'guest') {
            keyboard.add({
                text: 'üë©‚Äçüéì –ì—Ä—É–ø–ø–∞',
                color: KeyboardColor.PRIMARY_COLOR
            }).add({
                text: 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                color: KeyboardColor.PRIMARY_COLOR
            }).row()
        } else {
            if (this.chat.showDaily) {
                keyboard.add({
                    text: 'üìÑ –ù–∞ –¥–µ–Ω—å',
                    color: KeyboardColor.PRIMARY_COLOR
                })
            }

            if (this.chat.showWeekly) {
                keyboard.add({
                    text: 'üìë –ù–∞ –Ω–µ–¥–µ–ª—é',
                    color: KeyboardColor.PRIMARY_COLOR
                })
            }

            if (this.chat.showDaily || this.chat.showWeekly) keyboard.row()
        }

        const showFastAnother: boolean = this.chat.mode ? ['student', 'parent', 'teacher'].includes(this.chat.mode) : false;

        ///___ 2 LEVEL ___///
        if (showFastAnother && this.chat.showFastGroup) {
            keyboard.add({
                text: 'üë©‚Äçüéì –ì—Ä—É–ø–ø–∞',
                color: KeyboardColor.PRIMARY_COLOR
            })
        }

        if (this.chat.showAbout && this.chat.showCalls) keyboard.add({
            text: 'üïê –ó–≤–æ–Ω–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })

        if (showFastAnother && this.chat.showFastTeacher) {
            keyboard.add({
                text: ((this.chat.showAbout && this.chat.showCalls) && (showFastAnother && this.chat.showFastGroup)) ? 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥.' : 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                color: KeyboardColor.PRIMARY_COLOR
            })
        }


        ///___ 3 LEVEL ___///
        keyboard.row()
        if (!this.chat.showAbout && this.chat.showCalls) keyboard.add({
            text: 'üïê –ó–≤–æ–Ω–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })
        keyboard.add({
            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })
        if (this.chat.showAbout) keyboard.add({
            text: 'üí° –û –±–æ—Ç–µ',
            color: KeyboardColor.SECONDARY_COLOR
        })

        return keyboard
    }

    public get SettingsMain() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SettingsMain');

        return keyboard.add({
            text: 'üìö –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: '‚å®Ô∏è –ö–Ω–æ–ø–∫–∏'
        }).add({
            text: 'üìÉ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫'
        }).row().add({
            text: 'üîä –û–ø–æ–≤–µ—â–µ–Ω–∏—è'
        }).add({
            text: 'üñºÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        }).row().add({
            text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }

    public get SettingsButtons() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SettingsButtons');

        return keyboard.add({
            text: noYesSmile(this.chat.showDaily, '–ö–Ω–æ–ø–∫–∞ "üìÑ –ù–∞ –¥–µ–Ω—å"'),
            color: noYesColor(this.chat.showDaily)
        }).add({
            text: noYesSmile(this.chat.showWeekly, '–ö–Ω–æ–ø–∫–∞ "üìë –ù–∞ –Ω–µ–¥–µ–ª—é"'),
            color: noYesColor(this.chat.showWeekly)
        }).row().add({
            text: noYesSmile(this.chat.showCalls, '–ö–Ω–æ–ø–∫–∞ "üïê –ó–≤–æ–Ω–∫–∏"'),
            color: noYesColor(this.chat.showCalls)
        }).add({
            text: noYesSmile(this.chat.showAbout, '–ö–Ω–æ–ø–∫–∞ "üí° –û –±–æ—Ç–µ"'),
            color: noYesColor(this.chat.showAbout)
        }).row().add({
            text: noYesSmile(this.chat.showFastGroup, '–ö–Ω–æ–ø–∫–∞ "üë©‚Äçüéì –ì—Ä—É–ø–ø–∞"'),
            color: noYesColor(this.chat.showFastGroup)
        }).add({
            text: noYesSmile(this.chat.showFastTeacher, '–ö–Ω–æ–ø–∫–∞ "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"'),
            color: noYesColor(this.chat.showFastTeacher)
        }).row().add({
            text: '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            color: KeyboardColor.SECONDARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }

    public get SettingsNotice() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SettingsNotice');

        return keyboard.add({
            text: noYesSmile(this.chat.noticeChanges, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–Ω—è—Ö: ', ['üîà', 'üîá']) + (this.chat.noticeChanges ? '–î–∞' : '–ù–µ—Ç'),
            color: noYesColor(this.chat.noticeChanges)
        }).row().add({
            text: noYesSmile(this.chat.noticeNextWeek, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ: ', ['üîà', 'üîá']) + (this.chat.noticeNextWeek ? '–î–∞' : '–ù–µ—Ç'),
            color: noYesColor(this.chat.noticeNextWeek)
        }).row().add({
            text: '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            color: KeyboardColor.SECONDARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }

    public get SettingsView() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SettingsView');

        return keyboard.add({
            text: noYesSmile(this.chat.hidePastDays, '–°–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏'),
            color: noYesColor(this.chat.hidePastDays)
        }).row().add({
            text: noYesSmile(this.chat.showParserTime, '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'),
            color: noYesColor(this.chat.showParserTime)
        }).row().add({
            text: noYesSmile(this.chat.showHints, '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏: ') + (this.chat.showHints ? '–î–∞' : '–ù–µ—Ç'),
            color: noYesColor(this.chat.showHints),
        }).row().add({
            text: '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            color: KeyboardColor.SECONDARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }

    public get SettingsFormatters() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('Settings');

        for (const i in SCHEDULE_FORMATTERS) {
            const Formatter = SCHEDULE_FORMATTERS[i];

            const selected: boolean = this.chat.scheduleFormatter === +i;

            keyboard.add({
                text: Formatter.label + (selected ? ' (–≤—ã–±—Ä–∞–Ω)' : ''),
                color: selected ? KeyboardColor.POSITIVE_COLOR : KeyboardColor.PRIMARY_COLOR
            });

            if (+i + 1 % 2 === 0) keyboard.row();
        }

        return keyboard.row().add({
            text: '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            color: KeyboardColor.SECONDARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }

    public get SettingsAliases(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SettingsAliases');

        return keyboard.add({
            text: '–°–ø–∏—Å–æ–∫',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: '–î–æ–±–∞–≤–∏—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: '–£–¥–∞–ª–∏—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: '–û—Ç—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            color: KeyboardColor.SECONDARY_COLOR
        }).add({
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        });
    }

    public get GroupHistory() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('GroupHistory', true);

        for (const group of this.chat.groupSearchHistory) {
            keyboard.add({
                type: ButtonType.Callback,
                text: group,
                payload: 'answer' + JSON.stringify({
                    answer: group
                })
            });
        }

        return keyboard;
    }

    public get TeacherHistory() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('TeacherHistory', true);

        for (const teacher of this.chat.teacherSearchHistory) {
            keyboard.add({
                type: ButtonType.Callback,
                text: teacher,
                payload: 'answer' + JSON.stringify({
                    answer: teacher
                })
            })
        }

        return keyboard;
    }

    public generateVerticalKeyboard(values: string[]) {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('WithVerticalValues', true);

        for (const value of values) {
            keyboard.add({
                type: ButtonType.Callback,
                text: value,
                payload: 'answer' + JSON.stringify({
                    answer: value
                })
            }).row()
        }

        return keyboard;
    }

    public WeekControl(type: string, value: string | number, weekIndex: number, hidePastDays: boolean = true, showHeader: boolean = false): KeyboardBuilder | undefined {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('WeekControl', true);

        if (!isNaN(+value)) {
            value = Number(value)
        }

        if (type === 'group' || type === 'teacher') {
            type = type[0]; //first letter of type
        }

        const { min, max } = Updater.getInstance().archive.getWeekIndexBounds();

        let newLine: boolean = false;

        if (weekIndex - 1 >= min) {
            keyboard.add({
                type: ButtonType.Callback,
                text: '‚¨ÖÔ∏è',
                payload: 'timetable' + JSON.stringify([
                    type, value, (weekIndex - 1), Number(hidePastDays), Number(showHeader)
                ]),
                color: KeyboardColor.PRIMARY_COLOR
            });

            newLine = true;
        }

        //show full
        if (hidePastDays && weekIndex === WeekIndex.now().valueOf()) {
            keyboard.add({
                type: ButtonType.Callback,
                text: 'üîº',
                payload: 'timetable' + JSON.stringify([
                    type, value, weekIndex, 0, Number(showHeader)
                ]),
                color: KeyboardColor.PRIMARY_COLOR
            });

            newLine = true;
        }

        if (weekIndex + 1 <= max) {
            keyboard.add({
                type: ButtonType.Callback,
                text: '‚û°Ô∏è',
                payload: 'timetable' + JSON.stringify([
                    type, value, (weekIndex + 1), Number(hidePastDays), Number(showHeader)
                ]),
                color: KeyboardColor.PRIMARY_COLOR
            });

            newLine = true;
        }

        if (newLine) {
            keyboard.row();
        }

        keyboard.add({
            type: ButtonType.Callback,
            text: 'üì∑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            payload: 'image' + JSON.stringify([
                type, value, weekIndex
            ]),
            color: KeyboardColor.PRIMARY_COLOR
        });

        return keyboard;
    }

    public GetWeekTimetable(type: string, value: string | number): KeyboardBuilder | undefined {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('GenerateImage', true);

        if (!isNaN(+value)) {
            value = Number(value)
        }

        if (type === 'group' || type === 'teacher') {
            type = type[0]; //first letter of type
        }

        return keyboard.add({
            type: ButtonType.Callback,
            text: '–ù–∞ –Ω–µ–¥–µ–ª—é',
            payload: 'timetable' + JSON.stringify([
                type, value, null, 0, 1
            ]),
            color: KeyboardColor.PRIMARY_COLOR
        });
    }
}

export class StaticKeyboard {
    public static get NeedAccept() {
        return new KeyboardBuilder('NeedAccept', true)
            .add({
                text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
                color: KeyboardColor.POSITIVE_COLOR
            })
    }

    // public static get DisableChanges() {
    //     return new KeyboardBuilder('DisableChanges', true)
    //         .add({
    //             text: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö',
    //             color: KeyboardColor.PRIMARY_COLOR,
    //             payload: {
    //                 action: 'disableNoticeChanges'
    //             }
    //         })
    // }

    // public static get UnsubscribeMessages() {
    //     return new KeyboardBuilder('UnsubscribeMessages', true)
    //         .add({
    //             text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
    //             color: KeyboardColor.PRIMARY_COLOR,
    //             payload: {
    //                 action: 'unsubscribeMessages'
    //             }
    //         })
    // }

    public static get StartButton(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('StartButton');

        return keyboard.add({
            text: '–ù–∞—á–∞—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        });
    }

    public static get SelectMode(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SelectMode');

        return keyboard.add({
            text: 'üëÄ –ì–æ—Å—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: 'üë©‚Äçüéì –£—á–∞—â–∏–π—Å—è',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: 'üë®‚Äçüë©‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: 'üîô –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
            color: KeyboardColor.SECONDARY_COLOR
        });
    }

    public static get Cancel(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('Cancel');

        return keyboard.add({
            payload: 'cancel',
            text: '–û—Ç–º–µ–Ω–∞',
            color: KeyboardColor.NEGATIVE_COLOR
        });
    }
}

export function withCancelButton(keyboard: KeyboardBuilder) {
    keyboard.withCancelButton = true;

    keyboard.row().add({
        type: ButtonType.Callback,
        text: '–û—Ç–º–µ–Ω–∞',
        payload: 'cancel',
        color: KeyboardColor.NEGATIVE_COLOR
    });

    return keyboard;
}