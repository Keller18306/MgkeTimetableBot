import { DbChat } from './abstract/chat';
import { AbstractCommandContext } from './abstract/command';
import { KeyboardBuilder, KeyboardColor } from './abstract/keyboardBuilder';

export class Keyboard {
    private context?: AbstractCommandContext;
    private chat: DbChat;

    constructor(context: AbstractCommandContext | undefined, chat: DbChat) {
        this.context = context;
        this.chat = chat;
    }

    public get MainMenu(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('MainMenu');

        ///___ 1 LEVEL ___///
        if (this.chat.mode === null) {
            if (!this.context?.isChat) keyboard.add({
                text: 'üìö –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
                color: KeyboardColor.PRIMARY_COLOR
            }).row()
        } else if (this.chat.mode === 'guest') {
            keyboard.add({
                text: 'üë©‚Äçüéì –ì—Ä—É–ø–ø–∞',
                color: KeyboardColor.PRIMARY_COLOR
            }).add({
                text: 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                color: KeyboardColor.PRIMARY_COLOR
            }).row()
        } else {
            let newRow: boolean = false;

            if (this.chat.showDaily) {
                newRow = true;
                keyboard.add({
                    text: 'üìÑ –ù–∞ –¥–µ–Ω—å',
                    color: KeyboardColor.PRIMARY_COLOR
                })
            }

            if (this.chat.showWeekly) {
                newRow = true;
                keyboard.add({
                    text: 'üìë –ù–∞ –Ω–µ–¥–µ–ª—é',
                    color: KeyboardColor.PRIMARY_COLOR
                })
            }

            if (this.chat.showDaily || this.chat.showWeekly) keyboard.row()
        }

        const showFastAnother: boolean = this.chat.mode ? ['student', 'parent', 'teacher'].includes(this.chat.mode) : false;

        ///___ 2 LEVEL ___///
        if (showFastAnother && this.chat.showFastGroup) {
            keyboard.add({
                text: 'üë©‚Äçüéì –ì—Ä—É–ø–ø–∞',
                color: KeyboardColor.PRIMARY_COLOR
            })
        }

        if (this.chat.showAbout && this.chat.showCalls) keyboard.add({
            text: 'üïê –ó–≤–æ–Ω–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })

        if (showFastAnother && this.chat.showFastTeacher) {
            keyboard.add({
                text: ((this.chat.showAbout && this.chat.showCalls) && (showFastAnother && this.chat.showFastGroup)) ? 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥.' : 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                color: KeyboardColor.PRIMARY_COLOR
            })
        }


        ///___ 3 LEVEL ___///
        keyboard.row()
        if (!this.chat.showAbout && this.chat.showCalls) keyboard.add({
            text: 'üïê –ó–≤–æ–Ω–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })
        keyboard.add({
            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            color: KeyboardColor.SECONDARY_COLOR
        })
        if (this.chat.showAbout) keyboard.add({
            text: 'üí° –û –±–æ—Ç–µ',
            color: KeyboardColor.SECONDARY_COLOR
        })

        return keyboard
    }

    public get Settings() {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('Settings');

        function noYesSmile(value: number | boolean, text: string, smiles: [string, string] = ['‚úÖ', 'üö´']): string {
            return (value ? smiles[0] : smiles[1]) + ` ${text}`
        }

        function noYesColor(value: number | boolean) {
            return value ? KeyboardColor.POSITIVE_COLOR : KeyboardColor.NEGATIVE_COLOR
        }

        return keyboard.add({
            text: 'üìö –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: noYesSmile(this.chat.showDaily, '–ö–Ω–æ–ø–∫–∞ "üìÑ –ù–∞ –¥–µ–Ω—å"'),
            color: noYesColor(this.chat.showDaily)
        }).add({
            text: noYesSmile(this.chat.showWeekly, '–ö–Ω–æ–ø–∫–∞ "üìë –ù–∞ –Ω–µ–¥–µ–ª—é"'),
            color: noYesColor(this.chat.showWeekly)
        }).row().add({
            text: noYesSmile(this.chat.showCalls, '–ö–Ω–æ–ø–∫–∞ "üïê –ó–≤–æ–Ω–∫–∏"'),
            color: noYesColor(this.chat.showCalls)
        }).add({
            text: noYesSmile(this.chat.showAbout, '–ö–Ω–æ–ø–∫–∞ "üí° –û –±–æ—Ç–µ"'),
            color: noYesColor(this.chat.showAbout)
        }).row().add({
            text: noYesSmile(this.chat.showFastGroup, '–ö–Ω–æ–ø–∫–∞ "üë©‚Äçüéì –ì—Ä—É–ø–ø–∞"'),
            color: noYesColor(this.chat.showFastGroup)
        }).add({
            text: noYesSmile(this.chat.showFastTeacher, '–ö–Ω–æ–ø–∫–∞ "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"'),
            color: noYesColor(this.chat.showFastTeacher)
        }).row().add({
            text: noYesSmile(this.chat.removePastDays, '–£–¥–∞–ª—è—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏'),
            color: noYesColor(this.chat.removePastDays)
        }).row().add({
            text: noYesSmile(this.chat.showParserTime, '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'),
            color: noYesColor(this.chat.showParserTime)
        }).row().add({
            text: noYesSmile(this.chat.noticeChanges, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–Ω—è—Ö: ', ['üîà', 'üîá']) + (this.chat.noticeChanges ? '–î–∞' : '–ù–µ—Ç'),
            color: noYesColor(this.chat.noticeChanges)
        }).row().add({
            text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: '–ú–µ–Ω—é',
            color: KeyboardColor.SECONDARY_COLOR
        })
    }
}

export class StaticKeyboard {
    public static get NeedAccept() {
        return new KeyboardBuilder('NeedAccept', true)
            .add({
                text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
                color: KeyboardColor.POSITIVE_COLOR
            })
    }

    public static get DisableChanges() {
        return new KeyboardBuilder('DisableChanges', true)
            .add({
                text: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö',
                color: KeyboardColor.PRIMARY_COLOR,
                payload: {
                    action: 'disableNoticeChanges'
                }
            })
    }

    public static get UnsubscribeMessages() {
        return new KeyboardBuilder('UnsubscribeMessages', true)
            .add({
                text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                color: KeyboardColor.PRIMARY_COLOR,
                payload: {
                    action: 'unsubscribeMessages'
                }
            })
    }

    public static get StartButton(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('StartButton');

        return keyboard.add({
            text: '–ù–∞—á–∞—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        });
    }

    public static get SelectMode(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('SelectMode');

        return keyboard.add({
            text: 'üëÄ –ì–æ—Å—Ç—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: 'üë©‚Äçüéì –£—á–∞—â–∏–π—Å—è',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).row().add({
            text: 'üë®‚Äçüë©‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å',
            color: KeyboardColor.PRIMARY_COLOR
        }).add({
            text: 'üîô –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
            color: KeyboardColor.SECONDARY_COLOR
        });
    }

    public static get Cancel(): KeyboardBuilder {
        const keyboard: KeyboardBuilder = new KeyboardBuilder('Cancel');

        return keyboard.add({
            payload: {
                action: 'cancel'
            },
            text: '–û—Ç–º–µ–Ω–∞',
            color: KeyboardColor.NEGATIVE_COLOR
        });
    }
}