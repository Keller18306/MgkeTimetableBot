import { TelegramBotCommand } from 'puregram/generated';
import { raspCache } from '../../../../updater';
import { GroupDay, TeacherDay } from '../../../../updater/parser/types';
import { randArray, removePastDays } from "../../../../utils";
import { ScheduleFormatter } from '../../../../utils/formatters/abstract';
import { AbstractAction, AbstractChat, AbstractCommandContext, DefaultCommand, HandlerParams } from "../../abstract";
import { Keyboard } from '../../keyboard';

export default class extends DefaultCommand {
    public id = 'get_raspweek'

    public regexp = /^((!|\/)(get)?(rasp)?week|(üìë\s)?(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\s)?–Ω–∞ –Ω–µ–¥–µ–ª—é)$/i
    public payload = null;
    public tgCommand: TelegramBotCommand = {
        command: 'week',
        description: '–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'
    };

    async handler({ context, chat, actions, scheduleFormatter, keyboard }: HandlerParams) {
        if (Object.keys(raspCache.groups.timetable).length == 0 &&
            Object.keys(raspCache.teachers.timetable).length == 0) {
            return context.send('–î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ...');
        }

        if (chat.mode == 'student' || chat.mode == 'parent') return this.groupRasp(context, chat, actions, scheduleFormatter, keyboard);
        if (chat.mode == 'teacher') return this.teacherRasp(context, chat, actions, scheduleFormatter, keyboard);

        return context.send('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞');
    }

    private async groupRasp(context: AbstractCommandContext, chat: AbstractChat, actions: AbstractAction, scheduleFormatter: ScheduleFormatter, keyboard: Keyboard) {
        if (chat.group == null) {
            const randGroup = randArray(Object.keys(raspCache.groups.timetable));

            return context.send(
                '–í–∞—à–∞ —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n\n' +
                '–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /setGroup <group>\n' +
                '–ü—Ä–∏–º–µ—Ä:\n' +
                `/setGroup ${randGroup}`
            );
        }

        const group = raspCache.groups.timetable[chat.group];
        if (group === undefined) return context.send('–î–∞–Ω–Ω–æ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

        let days: GroupDay[] = group.days;
        if (chat.hidePastDays) {
            days = removePastDays(days);
        }

        actions.deleteLastMsg();

        const message = scheduleFormatter.formatGroupFull(String(chat.group), {
            showHeader: false,
            days: days
        })
        //const image = await ImageBuilder.getGroupImage(group);

        actions.deleteUserMsg();

        const id = await context.send(message, {
            keyboard: keyboard.GenerateImage('group', String(chat.group))
        }).then(id => {
            actions.handlerLastMsgUpdate(context)
            return id;
        });

        //return context.sendPhoto(image, { reply_to: id })
    }

    private async teacherRasp(context: AbstractCommandContext, chat: AbstractChat, actions: AbstractAction, scheduleFormatter: ScheduleFormatter, keyboard: Keyboard) {
        if (chat.teacher == null) {
            const randTeacher = randArray(Object.keys(raspCache.teachers.timetable));

            return context.send(
                '–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n\n' +
                '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /setTeacher <teacher>\n' +
                '–ü—Ä–∏–º–µ—Ä:\n' +
                `/setTeacher ${randTeacher}`
            );
        }

        const teacher = raspCache.teachers.timetable[chat.teacher];
        if (teacher === undefined) return context.send('–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

        let days: TeacherDay[] = teacher.days;
        if (chat.hidePastDays) {
            days = removePastDays(days);
        }

        actions.deleteLastMsg();

        const message = scheduleFormatter.formatTeacherFull(chat.teacher, {
            showHeader: false,
            days: days
        })

        actions.deleteUserMsg();

        return context.send(message, {
            keyboard: keyboard.GenerateImage('teacher', chat.teacher)
        }).then(context => actions.handlerLastMsgUpdate(context));
    }
}